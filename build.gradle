buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'org.springframework.boot' version '2.2.2.RELEASE'
    id "org.flywaydb.flyway" version "6.0.8"
    id "org.sonarqube" version "2.6.2"
    id "com.moowork.node" version "0.12"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'pmd'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'

ext {
    ossrhUsername = System.getenv("OSSRH_USERNAME")
    ossrhPassword = System.getenv("OSSRH_PASSWORD")
}
ext.set("signing.secretKeyRingFile", ".signing/secring.gpg")
ext.set("signing.keyId", System.getenv("SIGNING_KEYID"))
ext.set("signing.password", System.getenv("SIGNING_PASSWORD"))

group = serviceGroup
version = serviceVersion
archivesBaseName = rootProject.name
project.ext.buildTime = java.time.Instant.now().toString() // for versioning
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
    maven { url "http://jasperreports.sourceforge.net/maven2/" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://jaspersoft.jfrog.io/artifactory/third-party-ce-artifacts"}
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-data-rest"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:2.2.2.RELEASE"
    compile 'org.springframework:spring-context-support'
    compile 'org.hibernate:hibernate-java8'
    compile 'org.flywaydb:flyway-core'
    compile 'org.openlmis:openlmis-service-util:3.0.0'

    compile "org.projectlombok:lombok"
    compile "org.postgresql:postgresql:42.0.0"
    compile "com.google.guava:guava:18.0"
    compile 'org.webjars.npm:api-console:3.0.17'
    compile 'org.apache.commons:commons-lang3'
    compile 'org.apache.commons:commons-csv:1.4'
    compile 'org.apache.commons:commons-collections4:4.1'
    compile 'commons-io:commons-io:2.5'
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    compile "net.sf.jasperreports:jasperreports:6.5.1"
    compile "org.slf4j:slf4j-ext"
    compile "com.github.tomakehurst:wiremock:1.58"

    annotationProcessor 'org.projectlombok:lombok:1.18.10'
    compile group: 'javax.interceptor', name: 'javax.interceptor-api', version: '1.2'

    testCompile "junit:junit"
    testCompile "org.powermock:powermock-api-mockito2:2.0.4"
    testCompile "org.powermock:powermock-module-junit4:2.0.4"
    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile('org.flywaydb.flyway-test-extensions:flyway-spring-test:4.1.0')
    testCompile 'org.springframework.security:spring-security-test'
    testCompile "org.springframework:spring-test"
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.10'

    testCompile "com.jayway.restassured:rest-assured:2.7.0"
    testCompile "guru.nidi.raml:raml-tester:0.8.15"
    testCompile "org.raml:raml-parser:0.8.37"
    testCompile "nl.jqno.equalsverifier:equalsverifier:2.4"
    testCompile "be.joengenduvel.java.verifiers:to-string:1.0.2"

    runtime fileTree(dir: '/extensions/', include: '*.jar')
}

idea {
    project {
        vcs = 'Git'
        ipr.withXml { xmlFile ->
            // enable 'Annotation Processors', source: https://gist.github.com/stephanos/8645809
            xmlFile.asNode().component
                    .find { it.@name == 'CompilerConfiguration' }['annotationProcessing'][0]
                    .replaceNode {
                annotationProcessing {
                    profile(default: true, name: 'Default', useClasspath: 'true', enabled: true)
                }
            }
        }
    }
    module {
        sourceDirs -= file('src/integration-test/java')
        testSourceDirs += file('src/integration-test/java')
    }
}

flyway {
    url = "$System.env.DATABASE_URL"
    user = "$System.env.POSTGRES_USER"
    password = "$System.env.POSTGRES_PASSWORD"
    schemas = ['stockmanagement']
    sqlMigrationPrefix = ''
    placeholderPrefix = '#['
    placeholderSuffix = ']'
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = 'full'
    }
    mustRunAfter test
    environment 'BASE_URL', "http://localhost"
    exclude '**/demodata/**'
}

task demoDataTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = 'full'
    }
    mustRunAfter integrationTest
    environment 'BASE_URL', "http://localhost"
    include '**/demodata/**'
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
    reports.junitXml.destination = file("${testResultsDir}/${name}")
    environment 'BASE_URL', "http://localhost"
}

// Usage: gradle generateMigration [-PmigrationName=name_of_migration]
//          Defaults to 'migration' as migration name
// Example: gradle generateMigration -PmigrationName=add_column_to_users
//          Will create a file in migration folder with name yyyyMMddHHmmssSSS_add_column_to_users.sql.
task generateMigration {
    description 'Creates an empty new file within the src/main/resources/db/migration directory into which developers can add new SQL migration code.'
    doLast {
        def fileName = project.hasProperty('migrationName') ? migrationName : 'migration'
        def timestamp = new Date().format('yyyyMMddHHmmssSSS', TimeZone.getTimeZone('GMT'))
        def fullFileName = "${timestamp}__${fileName}.sql"
        def migrationFile = new File(sourceSets.main.resources.srcDirs.first(), 'db/migration/' + fullFileName)
        migrationFile << "-- WHEN COMMITTING OR REVIEWING THIS FILE: Make sure that the timestamp in the file name (that serves as a version) is the latest timestamp, and that no new migration have been added in the meanwhile.\n"
        migrationFile << "-- Adding migrations out of order may cause this migration to never execute or behave in an unexpected way.\n"
        migrationFile << "-- Migrations should NOT BE EDITED. Add a new migration to apply changes."
        migrationFile.createNewFile()
    }
}

task checkApiIsRaml(type: Exec) {
    executable "raml-cop"
    args "src/main/resources/api-definition.yaml"
}

configure(checkApiIsRaml) {
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = 'Verify that the api-specification is valid RAML'
}

jacocoTestReport {
    group = "reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled false
        html.enabled true
        csv.enabled false
    }

       additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
}

checkstyle {
    toolVersion = "8.12"
}

//Usage: gradle sonarqube
sonarqube {
    properties {
        def branch = System.getenv("SONAR_BRANCH")
        if (branch && branch != 'master') {
            property "sonar.branch", branch
        }
        property "sonar.projectName", "OpenLMIS Stock Management Service"
        property "sonar.projectKey", "org.sonarqube:$rootProject.name"
        property "sonar.projectVersion", version
        property "sonar.host.url", "http://sonar.openlmis.org"
        property "sonar.login", System.getenv("SONAR_LOGIN")
        property "sonar.password", System.getenv("SONAR_PASSWORD")
        property "sonar.java.coveragePlugin", "jacoco"
        //Tells SonarQube where the unit tests execution reports are
        property "sonar.junit.reportsPath", "build/test-results/test"
        //Tells SonarQube where the unit tests code coverage report is
        property "sonar.jacoco.reportPath", "build/jacoco/test.exec"
        //Tells SonarQube where the integration tests code coverage report is
        property "sonar.jacoco.itReportPath", "build/jacoco/integrationTest.exec"
        properties["sonar.tests"] += sourceSets.integrationTest.java
    }
}

project.tasks["sonarqube"].dependsOn integrationTest

pmd {
    toolVersion = '5.4.0'
    consoleOutput = true
    ignoreFailures = false
    ruleSetFiles = files("config/pmd/ruleset.xml")
    reportsDir = file("build/reports/pmd")
}

tasks.withType(Pmd) {
    reports {
        xml.enabled true
        html.enabled true
    }
}

test {
    testLogging {
        events 'started', 'passed'
        exceptionFormat = 'full'
    }
}

//enable the lines below if you need to debug spring running in docker
//bootRun {
//    jvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005"]
//}

signing {
    sign configurations.archives
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task execJar(type: Jar) {
    classifier = 'exec'
    from sourceSets.main.output
}

artifacts {
    archives javadocJar, sourcesJar, execJar
}

signArchives.onlyIf {project.findProperty("signing.keyId") && project.findProperty("signing.password")}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }
            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }
            pom.project {
                name project.name
                packaging 'jar'
                description project.description()
                url = 'https://openlmis.org'
                licenses {
                    license {
                        name 'GNU Affero General Public License, Version 3'
                        url 'https://www.gnu.org/licenses/agpl-3.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'techcommittee'
                        name = 'tech committee'
                        email = 'info@openlmis.org'
                        organizationUrl = 'https://villagereach.org'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/OpenLMIS/openlmis-stockmanagement.git'
                    developerConnection = 'scm:git:ssh://github.com/OpenLMIS/openlmis-stockmanagement.git'
                    url = 'http://github.com/OpenLMIS/openlmis-stockmanagement/'
                }
            }
        }
    }
}

uploadArchives.onlyIf { project.getProperty("ossrhUsername") && project.getProperty("ossrhPassword") }

apply from: "documentation.gradle"
integrationTest {
    dependsOn ramlToHtml
}

processResources {
    // we want the generated HTML spec file included in the output jar
    finalizedBy ramlToHtml

    // update version information in build
    filesMatching('**/version.properties') {
        expand(project.properties)
    }
}

check {
    dependsOn checkApiIsRaml
    dependsOn integrationTest
    finalizedBy uploadArchives
}

apply from: "registration.gradle"

build {
    dependsOn jacocoTestReport
    dependsOn check
    dependsOn ramlToHtml
    dependsOn copyRamlHtmlToBuild
    dependsOn copyConsulRegistrationToBuild
}
